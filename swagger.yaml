openapi: '3.0.0'
info: 
  title: Book Publishing Service
  description: Spring Boot application for managing a book publishing house. This service exposes a REST API that supports managing authors and publishing books as well as exposing them to the public.
  version: '1.0.0'
security: 
  - BarerAuth: [ ]
  
  
paths:
  
  /authors:
  
    get: 
      summary: Get all authors
      tags:
        - Author
      operationId: getAllAuthors
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 200 OK Response to GET Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthorList'
              example:
                _embedded:
                  item:
                    name: William
                    surname: Shakespeare
                    numOfBooks: 100
                    _links:
                      self:
                        href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
                _links:
                  self:
                    href: '{{baseURL}}/authors?page=1&size=1&sort=createdAt,desc'
                  first:
                    href: '{{baseURL}}/authors?page=1&size=1&sort=createdAt,desc'
                  next:
                    href: '{{baseURL}}/authors?page=2&size=1&sort=createdAt,desc'
                  last:
                    href: '{{baseURL}}/authors?page=10&size=1&sort=createdAt,desc'
                page:
                  size: 1
                  totalElements: 10
                  totalPages: 10
                  number: 1

    post:
      summary: Add an Author
      tags:
        - Author
      description: Add a new Author
      operationId: saveAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAuthor'
            example:
              name: 'Leo'
              surname: 'Tolstoy'
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          description: 400 BAD REQUEST Response to POST Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                InvalidMethodArgument:
                  value:
                    message: "Invalid method argument. Following validation rules must be applied: {surname=[must not be null]}"
                    status: 400
                HttpMessageNotReadable:
                  value:
                    message: "Http message is not readable"
                    status: 400
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
          
  /authors/{id}:
  
    get:
      summary: Retrieve Author
      tags:
        - Author
      operationId: retrieveAuthor
      parameters: 
        - $ref: '#/components/parameters/pathId'
      responses:
        '200': 
          description: 200 OK Response to GET Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              example:
                name: Leo
                surname: Tolstoy
                numberOfBooks: 100
                _links:
                  self:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
        '400':
          description: 400 BAD REQUEST Response to PUT Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                MismatchedArgumentType:
                  value:
                    message: "Mismatched argument type for parameter id with value: not-and-id"
                    status: 400
                AuthorNotFound:
                  value:
                    message: "Author with id 00000000-0000-0000-0000-000000000000 not found"
                    status: 404
  
    put:
      summary: Update Author
      tags:
        - Author
      operationId: updateAuthor
      parameters:
        - $ref: '#/components/parameters/updateId'
      description: Update Author whose id is provided
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAuthor'
      responses:
        '200':
          description: 200 OK Response to PUT Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              example:
                name: Leo
                surname: Lerman
                numberOfBooks: 100
                _links:
                  self:
                    href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
        '400':
          description: 400 BAD REQUEST Response to PUT Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                MismatchedArgumentType:
                  value:
                    message: "Mismatched argument type for parameter id with value: not-and-id"
                    status: 400
                InvalidMethodArgument:
                  value:
                    message: "Invalid method argument. Following validation rules must be applied: {surname=[must not be null]}"
                    status: 400
                AuthorNotFound:
                  value:
                    message: "Author with id 00000000-0000-0000-0000-000000000000 not found"
                    status: 404
                HttpMessageNotReadable:
                  value:
                    message: "Http message is not readable"
                    status: 400
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /authors/{id}/books:
  
    get:
      summary: Get books for author
      tags:
        - Author
      description: Get all books for a given author
      operationId: getBooksForAuthor
      parameters: 
        - $ref: '#/components/parameters/pathId'
      responses:
          '200':
            description: 200 OK Response to GET request
            content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/BookList'
                example:
                  _embedded:
                    item:
                      title: The Forged Coupon
                      isbn: 123-12345-123-12-1
                      genre: FICTION
                      _links:
                        self:
                          href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000'
                        authors:
                          href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
                          
                  _links:
                    self:
                      href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books'
                    first:
                      href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books?page=1&size=1&sort=createdAt,desc'
                    next:
                      href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books?page=2&size=1&sort=createdAt,desc'
                    last:
                      href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000/books?page=10&size=1&sort=createdAt,desc'
                  page:
                    size: 1
                    totalElements: 10
                    totalPages: 10
                    number: 1
          '400':
            description: 400 BAD REQUEST Response to GET Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
                example:
                  message: 'Author with id 00000000-0000-0000-0000-000000000000 not found'
                  status: 404

  /books:
  
    get:
      summary: Get all books
      tags:
        - Book
      operationId: getAllBooks
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/isbn'
        - $ref: '#/components/parameters/genre'
        - $ref: '#/components/parameters/authorName'
        - $ref: '#/components/parameters/authorSurname'
      responses:
        '200':
          description: 200 OK Response to GET request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BookList'
              example:
                _embedded:
                  item:
                    title: The Forged Coupon
                    isbn: 123-12345-123-12-1
                    genre: FICTION
                    _links:
                      self:
                        href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000'
                      authors:
                        href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
                        
                _links:
                  self:
                    href: '{{baseURL}}/books?page=1&size=1&sort=createdAt,desc'
                  first:
                    href: '{{baseURL}}/books?page=1&size=1&sort=createdAt,desc'
                  next:
                    href: '{{baseURL}}/books?page=2&size=1&sort=createdAt,desc'
                  last:
                    href: '{{baseURL}}/books?page=10&size=1&sort=createdAt,desc'
                page:
                  size: 1
                  totalElements: 10
                  totalPages: 10
                  number: 1
        
    post:
      summary: Publish a book
      tags:
        - Book
      operationId: saveBook
      description: Publish a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishBook'
            example:
              title: "War and Peace"
              isbn: "000-00000-000-00-0"
              genre: DRAMA
              authors:
                - href: "{{baseURL}}/authors/00000000-0000-0000-0000-000000000000"
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          description: 400 BAD REQUEST Response to POST Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                InvalidMethodArgument:
                  value:
                    message: "Invalid method argument. Following validation rules must be applied: {genre=[must not be null]}"
                    status: 400
                InvalidResource:
                  value:
                    message: "The parameter authors is not provided"
                    status: 400
                InvalidUuids:
                  value:
                    message: "Some of the ids are not valid UUIDs. These are: [00000000-0000-0000-0000-00000000000]"
                    status:
                AuthorsDontExist:
                  value:
                    message: "For the following ids: [00000000-0000-0000-0000-000000000000], authors don't exist."
                    status: 404
                HttpMessageNotReadable:
                  value:
                    message: "Http message is not readable"
                    status: 400
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
  
  /books/{id}/authors:
    get:
      summary: Get authors for book
      tags:
        - Book
      description: Get all authors for a given book
      operationId: getAuthorsForBook
      parameters: 
        - $ref: '#/components/parameters/pathId'
      responses:
        '200':
          description: 200 OK Response to GET Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthorList'
              example:
                _embedded:
                  item:
                    name: William
                    surname: Shakespeare
                    numberOfBooks: 100
                    _links:
                      self:
                        href: '{{baseURL}}/authors/00000000-0000-0000-0000-000000000000'
                _links:
                  self:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors'
                  first:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors?page=1&size=1&sort=createdAt,desc'
                  next:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors?page=2&size=1&sort=createdAt,desc'
                  last:
                    href: '{{baseURL}}/books/00000000-0000-0000-0000-000000000000/authors?page=10&size=1&sort=createdAt,desc'
                page:
                  size: 1
                  totalElements: 10
                  totalPages: 10
                  number: 1
        '400':
            description: 400 BAD REQUEST Response to GET Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
                example:
                  message: 'Book with id 00000000-0000-0000-0000-000000000000 not found'
                  status: 404


components:


  schemas:

    Author:
      properties:
        name:
          type: string
        surname: 
          type: string
        numOfBooks:
          type: integer
        _links:
          required:
            - self
          allOf:
            - $ref: '#/components/schemas/SelfLink'

    AuthorList:
      required:
        - _links
        - page
      properties:
        _embedded:
          required: 
            - item
          properties:
            item:
              type: array
              items: 
                $ref: '#/components/schemas/Author'
        _links:
          required:
            - self
          allOf:
            - $ref: '#/components/schemas/PaginationLinks'
            - $ref: '#/components/schemas/SelfLink'
        page:
          required:
            - size
            - totalElements
            - totalPages
            - number
          allOf:
            - $ref: '#/components/schemas/Page'
    
    Book:
      properties:
        title:
          type: string
        isbn: 
          type: string
        genre: 
          type: string
        _links:
          required:
            - self
          allOf:
            - $ref: '#/components/schemas/SelfLink'
            
    BookList:
      required:
        - _links
        - page
      properties:
        _embedded:
          required: 
            - item
          properties:
            item:
              type: array
              items: 
                $ref: '#/components/schemas/Book'
        _links:
          required:
            - self
          allOf:
            - $ref: '#/components/schemas/PaginationLinks'
            - $ref: '#/components/schemas/SelfLink'
        page:
          required:
            - size
            - totalElements
            - totalPages
            - number
          allOf:
            - $ref: '#/components/schemas/Page'
            
    PublishBook:
      required:
        - title
        - isbn
        - genre
        - authors
      properties:
        title:
          type: string
        isbn:
          type: string
        genre:
          type: string
        authors:
          type: array
          items: 
            $ref: '#/components/schemas/AuthorLink'
    
    AuthorLink:
      properties:
        href:
          type: string
          format: uri

    CreateOrUpdateAuthor:
      required:
        - name
        - surname
      properties:
        name: 
          type: string
        surname:
          type: string

    SelfLink:
      properties:
        self:
          readOnly: true
          properties:
            href:
              type: string
              format: uri

    PaginationLinks:
      properties:
        first:
          properties:
            href:
              type: string
              format: uri
        next:
          properties:
            href:
              type: string
              format: uri
        prev:
          properties:
            href:
              type: string
              format: uri
        last:
          properties:
            href:
              type: string
              format: uri
              
    Page:
      properties:
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer

    ErrorMessage:
      required:
        - message
        - status
      properties:
        message:
          type: string
        status:
          type: integer
  
  
  parameters:

    sort:
      name: sort
      in: query
      description: Sort order of results.
      schema:
        type: string
    
    updateId:
      name: id
      in: path
      required: true
      description: The id of the resource to update.
      schema: 
        type: string
        format: uuid
      
    pathId:
      name: id
      in: path
      required: true
      description: The id of the resource to retrieve.
      schema: 
        type: string
        format: uuid

    pageNumber:
      name: page
      in: query
      description: Page in pagination odrder to display.
      schema:
        type: integer
        minimum: 1

    pageSize:
      name: size
      in: query
      description: Number of elements on a page.
      schema:
        type: integer
        minimum: 1
    
    title:
      name: title
      in: query
      description: Book title.
      schema:
        type: string

    isbn:
      name: isbn
      in: query
      description: Book identification number.
      schema:
        type: string
      
    genre:
      name: genre
      in: query
      description: Book genre.
      schema:
        type: string
    
    authorName:
      name: name
      in: query
      description: Name of the author.
      schema:
        type: string
    
    authorSurname:
      name: surname
      in: query
      description: Surname of the author.
      schema:
        type: string
    
        
  responses:

    CreatedResponse:
      description: 201 CREATED Response
      headers:
        Location:
          $ref: '#/components/headers/Location'

    UnauthorizedResponse:
      description: 401 Unauthorized Error
      headers:
        WWW-Authenticate:
          $ref: '#/components/headers/WWW-Authenticate'
          


  headers:

    Location:
      description: HTTP Location Header
      schema:
        type: string
    
    WWW-Authenticate:
      description: Defines the authentication method that should be used to gain access to a resource.
      schema:
        type: string
        enum: [ Bearer ]
